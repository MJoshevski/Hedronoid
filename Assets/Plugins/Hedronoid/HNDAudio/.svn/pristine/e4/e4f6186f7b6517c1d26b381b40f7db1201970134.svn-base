using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System.Xml;
using System.IO;
using System;

namespace NapNok.Audio
{
    public class AudioManagerImporterWindow : EditorWindow
    {
        [SerializeField]
        private string m_XmlPath;
        [SerializeField]
        private string m_AudioFolderPath;
        [SerializeField]
        private string m_LangCode;
        [SerializeField]
        private bool m_ImportAllLangs;
        [SerializeField]
        private bool m_CleanUpVOClips;

        private AudioManagerData m_AudioManagerRootData;

        private const string PrefKey_XmlPath = "AudioManagerImporterWindow:XmlPath";
        private const string PrefKey_AudioFolderPath = "AudioManagerImporterWindow:AudioFolderPath";
        private const string PrefKey_LangCode = "AudioManagerImporterWindow:LangCode";
        private const string PrefKey_ImportAllLangs = "AudioManagerImporterWindow:ImportAllLangs";
        private const string PrefKey_CleanUpVOClips = "AudioManagerImporterWindow:CleanUpVOClips";

        private const string m_DefaultLangCodeForImporting = "en-gb";

        public void Initialize(AudioManagerData rootData)
        {
            m_XmlPath = EditorPrefs.GetString(PrefKey_XmlPath);
            m_AudioFolderPath = EditorPrefs.GetString(PrefKey_AudioFolderPath);
            m_LangCode = EditorPrefs.GetString(PrefKey_LangCode, m_DefaultLangCodeForImporting);
            m_ImportAllLangs = EditorPrefs.GetBool(PrefKey_ImportAllLangs);
            m_CleanUpVOClips = EditorPrefs.GetBool(PrefKey_CleanUpVOClips);

            m_AudioManagerRootData = rootData;
        }

        void OnGUI()
        {
            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField("XML file:", GUILayout.Width(100f));
            m_XmlPath = EditorGUILayout.TextField(m_XmlPath, GUILayout.ExpandWidth(true));
            if (GUILayout.Button("Browse", GUILayout.ExpandWidth(false)))
                m_XmlPath = EditorUtility.OpenFilePanel("Select 'Export for Project' XML file generated by LAMS", "", "xml");
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField("Audio folder:", GUILayout.Width(100f));
            m_AudioFolderPath = EditorGUILayout.TextField(m_AudioFolderPath, GUILayout.ExpandWidth(true));
            if (GUILayout.Button("Browse", GUILayout.ExpandWidth(false)))
                m_AudioFolderPath = EditorUtility.OpenFolderPanel("Select Resource Folder", "", "");
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField("Language code:", GUILayout.Width(100f));
            m_LangCode = EditorGUILayout.TextField(m_LangCode, GUILayout.ExpandWidth(true));
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField("Import all langs:", GUILayout.Width(100f));
            m_ImportAllLangs = EditorGUILayout.Toggle(m_ImportAllLangs, GUILayout.ExpandWidth(true));
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField("Cleanup VO clips:", GUILayout.Width(100f));
            m_CleanUpVOClips = EditorGUILayout.Toggle(m_CleanUpVOClips, GUILayout.ExpandWidth(true));
            EditorGUILayout.EndHorizontal();

            EditorPrefs.SetString(PrefKey_XmlPath, m_XmlPath);
            EditorPrefs.SetString(PrefKey_AudioFolderPath, m_AudioFolderPath);
            EditorPrefs.SetString(PrefKey_LangCode, m_LangCode);
            EditorPrefs.SetBool(PrefKey_ImportAllLangs, m_ImportAllLangs);
            EditorPrefs.SetBool(PrefKey_CleanUpVOClips, m_CleanUpVOClips);

            if (GUILayout.Button("Import"))
            {
                Import();
            }
        }


        private void Import()
        {
            NapAudioPreferences preferences = NapAudioPreferences.Instance;

            var xmlDocument = new XmlDocument();
            xmlDocument.Load(m_XmlPath);

            int amountDialogueLinesFoundInLAMS = 0;
            int amountDialogueLinesUpdatedInAudioManager = 0;
            int errorCode = 0;

            // Ensure that all languages from LAMS are also in NapLoc
            Dictionary<string, string> languageIdToCultureCode = new Dictionary<string, string>();
            Dictionary<string, string> languageIdToShortCode = new Dictionary<string, string>();
            XmlNodeList allLanguages = xmlDocument.DocumentElement.SelectNodes("/script/properties/search_params/languages/language");
            foreach (XmlNode language in allLanguages)
            {
                string langId = language.Attributes.GetNamedItem("id").Value;
                string cultCode = language.Attributes.GetNamedItem("culture_code").Value.ToLowerInvariant();
                string shortCode = language.Attributes.GetNamedItem("short_code").Value.ToLowerInvariant();
                languageIdToCultureCode.Add(langId, cultCode);
                languageIdToShortCode.Add(langId, shortCode);
            }

            XmlNodeList allSubsectionNodes = xmlDocument.DocumentElement.SelectNodes("/script/body/section/subsection[@type='gameplay']");
            if (allSubsectionNodes.Count == 0) errorCode = 1; // If NO subsections was found in the XML file, it's probably because user selected an incorrect XML file to import. Give a warning in that case
            Dictionary<string, AudioManagerCategory> audioManagerLeaves = m_AudioManagerRootData.TreeData.GetLeafDictionary();
            HashSet<string> keysSeenInLAMS = new HashSet<string>();
            HashSet<string> keysSeenInLAMSButNotInAudioManager = new HashSet<string>();

            AudioManagerCategory projectVOCategory = m_AudioManagerRootData.TreeData.Children[preferences.ProjectVOCategoryName];
            if (m_CleanUpVOClips)
            {
                // Clean up VO
                foreach (AudioManagerCategory c in projectVOCategory.GetAllLeafs())
                {
                    c.CleanClips();
                }
            }

            foreach (XmlNode subsectionNode in allSubsectionNodes)
            {
                string subsectionName = subsectionNode.Attributes.GetNamedItem("name").Value;

                string gameName = subsectionName.Substring(0, 1) + subsectionName.ToLowerInvariant().Substring(1, subsectionName.Length - 1);
                //HACK: Haaaaack, dirty stuff... we need some import configurer, or set this up in LAMS (should be possible)
                string bundleFolder = "ServerOnly";
                if (gameName == "Secret")
                {
                    bundleFolder = "ServerAndClient";
                }
                string folderPath = (Directory.Exists("Assets/Games/" + gameName + "/")) ? "Assets/Games/" + gameName + "/Sound/" + bundleFolder + "/LAMS/" : "Assets/Global/Sound/ServerOnly/" + gameName + "/LAMS/";

                // Each subsection in LAMS corresponds to one type of prefix for our NapLoc keys
                XmlNodeList dialogues = subsectionNode.SelectNodes("dialogue");
                foreach (XmlNode dialogue in dialogues)
                {
                    amountDialogueLinesFoundInLAMS++;
                    string originalItemKey = dialogue.SelectSingleNode("script_line/source").Attributes.GetNamedItem("unique_name").Value;
                    string itemKey = originalItemKey;
                    //					Debug.Log(itemKey);
                    bool isPartOfVariation = false;
                    int variationNumber = 0;
                    if (int.TryParse(itemKey.Substring(itemKey.LastIndexOf("_") + 1), out variationNumber))
                    {
                        isPartOfVariation = true;
                        itemKey = itemKey.Substring(0, itemKey.LastIndexOf("_"));
                    }

                    XmlNodeList translationNodes = dialogue.SelectNodes("script_line/translations/translation");
                    foreach (XmlNode translationNode in translationNodes)
                    {
                        XmlNode assetNode = translationNode.SelectSingleNode("asset");
                        string itemFileName = "";
                        if (assetNode != null && assetNode.Attributes.GetNamedItem("path") != null)
                        {
                            itemFileName = assetNode.Attributes.GetNamedItem("path").Value;
                        }
                        bool audioManagerContainsKey = audioManagerLeaves.ContainsKey(itemKey);

                        if (!audioManagerContainsKey)
                        {
                            //FIND IF section is VO
                            string parentName = subsectionNode.ParentNode.Attributes.GetNamedItem("name").Value;
                            {
                                if (parentName == preferences.LAMSVOCategoryName)
                                {
                                    D.AudioWarning("Key '" + itemKey + "' not present. Creating in root category!");
                                    AudioManagerCategory c = m_AudioManagerRootData.CreateAudioManagerCategory(itemKey);
                                    projectVOCategory.Add(c);
                                    audioManagerLeaves.Add(itemKey, c);
                                    c.DefaultBus = null;
                                    audioManagerContainsKey = true;
                                }
                            }
                        }

                        //Debug.Log(itemKey + " " + itemFileName + " " + audioManagerContainsKey);
                        if (audioManagerContainsKey)
                        {
                            string languageCultureCode = languageIdToCultureCode[translationNode.Attributes.GetNamedItem("langId").Value];

                            // Only import selected language, ignore others if not importing all
                            if (!m_ImportAllLangs && languageCultureCode != m_LangCode)
                            {
                                continue;
                            }

                            string languageFolderPath = folderPath + languageCultureCode;

                            // Write subtitle file
                            string subFolderPath = languageFolderPath + "/sub";
                            if (!Directory.Exists(subFolderPath)) Directory.CreateDirectory(subFolderPath);
                            string fullsubPath = subFolderPath + "/" + originalItemKey + ".txt";
                            File.WriteAllText(fullsubPath, "");
                            XmlNodeList subtitleNodes = translationNode.SelectNodes("subtitles/subtitle");
                            int subtitleCounter = 0;
                            foreach (XmlNode subtitleNode in subtitleNodes)
                            {
                                subtitleCounter++;
                                string tempText = subtitleCounter + "\n";
                                TimeSpan startTime = new TimeSpan(0, 0, 0, 0, int.Parse(subtitleNode.Attributes.GetNamedItem("start").Value));
                                tempText += startTime.Days + ":" + startTime.Hours + ":" + startTime.Seconds + "," + startTime.Milliseconds.ToString("D3") + " --> ";
                                TimeSpan stopTime = new TimeSpan(0, 0, 0, 0, int.Parse(subtitleNode.Attributes.GetNamedItem("stop").Value));
                                tempText += stopTime.Days + ":" + stopTime.Hours + ":" + stopTime.Seconds + "," + stopTime.Milliseconds.ToString("D3") + "\n";

                                // Replace all line breaks with \n so SRT format is still valid
                                tempText += subtitleNode.InnerText.ReplaceNewlinesWith("\\n") + "\n\n";

                                File.AppendAllText(fullsubPath, tempText);
                            }

                            if (m_ImportAllLangs || languageCultureCode.Equals(m_LangCode))
                            {
                                // Copy audio file to the project
                                string fileName = itemFileName.Substring(itemFileName.LastIndexOf("\\") + 1);
                                var info = new DirectoryInfo(m_AudioFolderPath);
                                var fileInfo = info.GetFiles(fileName, SearchOption.AllDirectories);

                                string fullAudioPath = "";
                                if (fileInfo != null && fileInfo.Length > 0 && string.IsNullOrEmpty(fileInfo[0].FullName) == false)
                                {
                                    fullAudioPath = languageFolderPath + "/" + originalItemKey + ".wav";

                                    if (!Directory.Exists(languageFolderPath)) Directory.CreateDirectory(languageFolderPath);
                                    File.Copy(fileInfo[0].FullName, fullAudioPath, true);
                                }
                                else
                                {
                                    D.AudioWarning("No fileInfo for file '" + fileName + "', culture code: " + languageCultureCode);
                                }

                                // Only manipulate audio manager leaves for default import langue (needs to be the first one)
                                if (languageCultureCode == m_DefaultLangCodeForImporting && !string.IsNullOrEmpty(fullAudioPath))
                                {
                                    amountDialogueLinesUpdatedInAudioManager++;
                                    AudioManagerCategory leaf = audioManagerLeaves[itemKey];

                                    if (isPartOfVariation)
                                    {
                                        if (keysSeenInLAMS.Contains(itemKey) == false)
                                        {
                                            keysSeenInLAMS.Add(itemKey);
                                            leaf.AudioData = new List<string>();
                                        }
                                        leaf.AudioData.Add(fullAudioPath);
                                    }
                                    else
                                    {
                                        keysSeenInLAMS.Add(itemKey);
                                        leaf.AudioData = new List<string> { fullAudioPath };
                                    }
                                }
                                //								Debug.Log(fullAssetPath);
                            }
                        }
                        else
                        {
                            if (string.IsNullOrEmpty(itemFileName))
                            {
                                D.AudioWarning("Can't import file '" + itemKey + "' as the wav file is not defined in the source");
                            }

                            keysSeenInLAMSButNotInAudioManager.Add(originalItemKey);
                        }
                    }
                }
            }

            string tempKeysNotFoundLocally = "";
            foreach (string tempKey in keysSeenInLAMSButNotInAudioManager) tempKeysNotFoundLocally += "\n" + tempKey;
            if (tempKeysNotFoundLocally.Length > 0)
            {
                EditorUtility.DisplayDialog("LAMS import warning", "The following VO keys were found in LAMS but not in Audio Manager:\n" + tempKeysNotFoundLocally, "OK");

            }

            string tempKeysNotFoundInLAMS = "";
            foreach (string leafKey in audioManagerLeaves.Keys)
            {
                //				Debug.Log(leafKey + " " + keysSeenInLAMS.Contains(leafKey) + " " + audioManagerLeaves[leafKey].IsVO());
                if (!keysSeenInLAMS.Contains(leafKey) &&
                    audioManagerLeaves[leafKey].IsParentOfCategory(preferences.ProjectVOCategoryName) &&
                    !audioManagerLeaves[leafKey].GetClosestBus().name.Equals("MM_VO_Instructor") &&
                    (leafKey.LastIndexOf("_") != -1 && !leafKey.Substring(leafKey.LastIndexOf("_")).ToUpperInvariant().Equals("_DUMMY"))
                    )
                {
                    tempKeysNotFoundInLAMS += "\n" + leafKey;
                }
            }
            if (tempKeysNotFoundInLAMS.Length > 0)
            {
                EditorUtility.DisplayDialog("LAMS import warning", "The following VO keys were found in Audio Manager but not in LAMS:\n" + tempKeysNotFoundInLAMS, "OK");
            }

            var categoriesWindow = (AudioManagerCategoriesWindow)EditorWindow.GetWindow(typeof(AudioManagerCategoriesWindow));
            categoriesWindow.Save();
            if (errorCode > 0)
            {
                EditorUtility.DisplayDialog("LAMS import error", "errorCode = " + errorCode, "OK");
            }
            else
            {
                EditorUtility.DisplayDialog("LAMS import done", "Amount dialogue found in LAMS : " + amountDialogueLinesFoundInLAMS + "\nAmount dialogue updated in Audio Manager : " + amountDialogueLinesUpdatedInAudioManager /* + "\nAmount translations changed : " + amountTranslatedTextsChanged + "\nAmount source texts changed : " + amountSourceTextsChanged */ , "OK");
            }
        }
    }
}
